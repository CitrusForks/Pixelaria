/*
    Pixelaria
    Copyright (C) 2013 Luiz Fernando Silva

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

    The full license may be found on the License.txt file attached to the
    base directory of this project.
*/

using System;
using System.Windows.Forms;

using Pixelaria.Data;

namespace Pixelaria.Views.MiscViews
{
    /// <summary>
    /// Displays an interface where the user can choose the scaling method to apply to an Animation object when resizing it
    /// </summary>
    public partial class AnimationResizeView : Form
    {
        /// <summary>
        /// The starting width of the animation
        /// </summary>
        private int startWidth;

        /// <summary>
        /// The starting height of the animation
        /// </summary>
        private int startHeight;

        /// <summary>
        /// The new width for the animation
        /// </summary>
        private int newWidth;

        /// <summary>
        /// The new height for the animation
        /// </summary>
        private int newHeight;

        /// <summary>
        /// The aspect ratio for the image
        /// </summary>
        private decimal aspectRatio;

        /// <summary>
        /// Whether to make the nuds ignore the next value changed event call
        /// </summary>
        private bool ignoreEvent;

        /// <summary>
        /// The animation to be used as preview for the resize operation
        /// </summary>
        private Animation animation;

        /// <summary>
        /// The frame used to preview the changes
        /// </summary>
        private Frame viewFrame;

        /// <summary>
        /// The AnimationResizeSettings generated by the user input on this form
        /// </summary>
        public AnimationResizeSettings GeneratedSettings;

        /// <summary>
        /// Initializes a new instance of the AnimationResizeView class
        /// </summary>
        /// <param name="animation">The animation</param>
        /// <param name="startWidth">The starting width of the animation</param>
        /// <param name="startHeight">The starting height of the animation</param>
        public AnimationResizeView(Animation animation, int startWidth, int startHeight)
        {
            InitializeComponent();

            this.zpb_preview.HookToForm(this);

            this.animation = animation;

            this.newWidth = this.startWidth = startWidth;
            this.newHeight = this.startHeight = startHeight;

            this.ignoreEvent = false;

            this.nud_width.Value = startWidth;
            this.nud_height.Value = startHeight;

            this.nud_scaleX.Maximum = (4096 / startWidth) * 100;
            this.nud_scaleY.Maximum = (4096 / startHeight) * 100;

            this.aspectRatio = (decimal)startWidth / startHeight;

            GeneratePreview();
        }

        /// <summary>
        /// Updates the scale nuds
        /// </summary>
        public void UpdateScaleNuds()
        {
            nud_scaleX.Value = Math.Max(nud_scaleX.Minimum, Math.Min(nud_scaleX.Maximum, (decimal)((float)newWidth / startWidth * 100)));
            nud_scaleY.Value = Math.Max(nud_scaleY.Minimum, Math.Min(nud_scaleY.Maximum, (decimal)((float)newHeight / startHeight * 100)));
        }

        /// <summary>
        /// Updates the dimension nuds
        /// </summary>
        public void UpdateDimensionNuds()
        {
            newWidth = (int)(nud_width.Value = ClampDecimal((nud_scaleX.Value / 100) * startWidth));
            newHeight = (int)(nud_height.Value = ClampDecimal((nud_scaleY.Value / 100) * startHeight));
        }

        /// <summary>
        /// Generates a preview 
        /// </summary>
        private void GeneratePreview()
        {
            RegenerateSettings();

            if (animation.FrameCount > 0)
            {
                if (viewFrame != null)
                {
                    viewFrame.Dispose();
                }

                viewFrame = animation[0].Clone();

                viewFrame.Resize(GeneratedSettings.NewWidth, GeneratedSettings.NewHeight, GeneratedSettings.PerFrameScalingMethod, GeneratedSettings.InterpolationMode);

                zpb_preview.Image = viewFrame.GetComposedBitmap();
            }
        }

        /// <summary>
        /// Regenerates the AnimationResizeSettings field with the data from the view's fields
        /// </summary>
        /// <returns>The newly created AnimationResizeSettings</returns>
        private AnimationResizeSettings RegenerateSettings()
        {
            // Resolution
            GeneratedSettings.NewWidth = (int)nud_width.Value;
            GeneratedSettings.NewHeight = (int)nud_height.Value;

            // Frame scaling method
            if (rb_frameScaling_placeAtTopLeft.Checked)
            {
                GeneratedSettings.PerFrameScalingMethod = PerFrameScalingMethod.PlaceAtTopLeft;
            }
            else if (rb_frameScaling_placeAtCenter.Checked)
            {
                GeneratedSettings.PerFrameScalingMethod = PerFrameScalingMethod.PlaceAtCenter;
            }
            else if (rb_frameScaling_stretch.Checked)
            {
                GeneratedSettings.PerFrameScalingMethod = PerFrameScalingMethod.Stretch;
            }

            // Drawing mode
            if (rb_drawingMode_lowQuality.Checked)
            {
                GeneratedSettings.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.NearestNeighbor;
            }
            else if (rb_drawingMode_highQuality.Checked)
            {
                GeneratedSettings.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
            }

            return GeneratedSettings;
        }

        // 
        // Form Closed event handler
        // 
        private void AnimationResizeView_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (zpb_preview.Image != null)
                zpb_preview.Image.Dispose();

            if (viewFrame != null)
            {
                viewFrame.Dispose();
                viewFrame = null;
            }
        }

        // 
        // Ok button click event handler
        // 
        private void btn_ok_Click(object sender, EventArgs e)
        {
            RegenerateSettings();

            DialogResult = DialogResult.OK;

            this.Close();
        }

        // 
        // Common event for all Radio Buttons in the control
        // 
        private void radioButtonsChange(object sender, EventArgs e)
        {
            GeneratePreview();
        }

        // 
        // Keep Aspect Ratio checkbox
        // 
        private void cb_keepAspectRatio_CheckedChanged(object sender, EventArgs e)
        {
            ignoreEvent = true;

            nud_height.Value = ClampDecimal((nud_width.Value) / aspectRatio);

            UpdateScaleNuds();

            ignoreEvent = false;
        }

        // 
        // Width nud value change event handler
        // 
        private void nud_width_ValueChanged(object sender, EventArgs e)
        {
            GeneratePreview();

            if (ignoreEvent)
                return;

            newWidth = (int)nud_width.Value;

            ignoreEvent = true;

            if (cb_keepAspectRatio.Checked)
            {
                newHeight = (int)(nud_height.Value = ClampDecimal(nud_width.Value / aspectRatio));
            }

            UpdateScaleNuds();

            ignoreEvent = false;
        }

        // 
        // Height nud value change event handler
        // 
        private void nud_height_ValueChanged(object sender, EventArgs e)
        {
            GeneratePreview();

            if (ignoreEvent)
                return;

            newHeight = (int)nud_height.Value;

            ignoreEvent = true;

            if (cb_keepAspectRatio.Checked)
            {
                newWidth = (int)(nud_width.Value = ClampDecimal(nud_height.Value * aspectRatio));
            }

            UpdateScaleNuds();

            ignoreEvent = false;
        }

        // 
        // Scale X nud value change event handler
        // 
        private void nud_scaleX_ValueChanged(object sender, EventArgs e)
        {
            if (ignoreEvent)
                return;

            ignoreEvent = true;

            if (cb_keepAspectRatio.Checked)
            {
                nud_scaleY.Value = nud_scaleX.Value;
            }

            UpdateDimensionNuds();

            ignoreEvent = false;
        }

        // 
        // Scale Y nud value change event handler
        // 
        private void nud_scaleY_ValueChanged(object sender, EventArgs e)
        {
            if (ignoreEvent)
                return;

            ignoreEvent = true;

            if (cb_keepAspectRatio.Checked)
            {
                nud_scaleX.Value = nud_scaleY.Value;
            }

            UpdateDimensionNuds();

            ignoreEvent = false;
        }

        /// <summary>
        /// Clamps the given decimal to be within the acceptable resolutions
        /// </summary>
        /// <param name="dec">The decimal to clamp</param>
        /// <returns>The given decimal to be within the acceptable resolutions</returns>
        private static decimal ClampDecimal(decimal dec)
        {
            return Math.Max(1, Math.Min(4096, dec));
        }
    }
}